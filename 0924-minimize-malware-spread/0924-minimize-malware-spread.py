class UnionFind:
    def __init__(self, size):
        self.parent = [i for i in range(size+1)]
        self.size = [1] * (size+1)
        
    def find(self, x):
        if self.parent[x] == x:
            return x
        self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
		
    def union(self, x, y):
        x_rep = self.find(x)
        y_rep = self.find(y)
        if x_rep != y_rep:
            if self.size[x_rep] > self.size[y_rep]:
                self.parent[y_rep] = x_rep
                self.size[x_rep] += self.size[y_rep]
            elif self.size[y_rep] > self.size[x_rep]:
                self.parent[x_rep] = y_rep
                self.size[y_rep] += self.size[x_rep]
            else:
                self.parent[y_rep] = x_rep
                self.size[x_rep] += self.size[y_rep]

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        N = len(graph)
        uf = UnionFind(N)
        for i in range(N):
            for j in range(i+1, N):
                if graph[i][j] == 1:
                    uf.union(i, j)
        initial.sort()
        root_sizeInfected = {}
        for infected in initial:
            root = uf.find(infected)
            if root not in root_sizeInfected:
                root_sizeInfected[root] = [uf.size[root], -infected]
            else:
                root_sizeInfected[root].append(-infected)
      
        result = list(filter(lambda x: len(x) == 2, root_sizeInfected.values()))
        
        return initial[0] if len(result) == 0 else sorted(result)[-1][1]
